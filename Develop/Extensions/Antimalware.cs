using Mono.Cecil;
using Mono.Cecil.Cil;
using mr = Mono.Reflection;
using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace Develop.Extensions
{
    public class Antimalware
    {
        private static string LogsDir = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.UserProfile), ".develop", "Logs", "AM");

        private static string[] PotentiallyDangerous = new string[]
        {
            "System.IO"
        };

        private static void Log(string file, string log)
        {
            Debug.WriteLine(log);
            if (!File.Exists(file))
                File.Create(file).Close();
            File.WriteAllText(file, File.ReadAllText(file) + log + '\n');
        }

        public static void ScanMonoAssembly(string path)
        {
            FileInfo f = new(path);

            DirectoryExtensions.CreateDirectoryRecursively(LogsDir);

            string logFile = Path.Combine(LogsDir, $"am-{DateTime.Now.ToString("yyyy-MM-dd_HH-mm-ss")}-{f.Name.Replace(' ', '-')}.txt");

            Log(logFile, "-------------------");
            Log(logFile, "- Develop AV v1.0 -");
            Log(logFile, "-------------------");
            Log(logFile, $"Running antimalware on file '{f.FullName}'");

            try
            {
                AssemblyDefinition assembly = AssemblyDefinition.ReadAssembly(path);

                foreach (ModuleDefinition module in assembly.Modules)
                {
                    Log(logFile, $"Analyzing module '{module.Name}'");
                    foreach (TypeDefinition type in module.Types)
                    {
                        Log(logFile, $"Analyzing type '{type.FullName}'");
                        foreach (MethodDefinition method in type.Methods)
                        {
                            Log(logFile, $"Analyzing method definition '{method.FullName}'");
                            foreach (Instruction instruction in method.Body.Instructions)
                            {
                                Log(logFile, $"Instruction: OpCode: {instruction.OpCode.Name}");
                                if (instruction.OpCode == OpCodes.Call)
                                {
                                    MethodReference values = (MethodReference)instruction.Operand;

                                    if (values != null)
                                    {
                                        var arguments = values.Parameters;
                                        Log(logFile, "Calling method: " + values.FullName);
                                    }
                                }
                            }
                        }
                    }
                }
            }
            catch (Exception e)
            {
                Log(logFile, e.ToString());
            }
        }
    }
}
